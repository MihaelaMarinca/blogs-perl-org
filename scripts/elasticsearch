#!/usr/bin/env perl

use strict;
use warnings;

use DBI;
use Search::Elasticsearch;
use Try::Tiny;

$|++;

my $database_name = $ARGV[0] || 'BlogsPerlOrg';

my $in_dsn = "dbi:mysql:database=$database_name";
my $e = Search::Elasticsearch->new;

my $in_dbh = DBI->connect($in_dsn,'root');

###############################################################################

my %post_tags;

sub _get_tags {
  my $in_sth = $in_dbh->prepare(<<'EOF');
  SELECT t.id as tag_id, t.slug, t.name, p.id as post_id
    FROM tag t
    JOIN post_tag pt ON pt.tag_id = t.id
    JOIN post p ON p.id = pt.post_id
ORDER BY p.id
EOF

  $in_sth->execute();

  my $count  = 0;
  while ( my $tag = $in_sth->fetchrow_hashref ) {
    print '.' if $count++ % 100 == 0;
    push @{ $post_tags{$tag->{post_id}} }, {
      id => $tag->{tag_id},
      name => $tag->{name},
      slug => $tag->{slug},
    };
  }
}

sub index_posts {
  my $in_sth = $in_dbh->prepare(<<'EOF');
  SELECT u.username, p.id, p.slug, p.title, p.content, p.created_date
    FROM post p
    JOIN `user` u ON p.user_id = u.id
ORDER BY p.id
EOF

  $in_sth->execute();

  my $count  = 0;
  while ( my $post = $in_sth->fetchrow_hashref ) {
    print '.' if $count++ % 100 == 0;

    # XXX There's probably a better way to do this with ElasticSearch,
    # XXX but I don't have the time to do the research ATM.
    my $tag_list = '';
    if ( exists $post_tags{$post->{id}} ) {
      $tag_list = join( ' | ', map { $_->{name} } @{ $post_tags{$post->{id}} } );
    }
    $e->index(
      index   => 'posts',
      type    => 'published_blog_posts',
      id      => $post->{id},
      body    => {
          id       => $post->{id},
          username => $post->{username},
          slug     => $post->{slug},
          title    => $post->{title},
          content  => $post->{content},
          date     => $post->{created_date},
          tags     => $tag_list
      }
    );
  }
}

sub index_comments {
  my $in_sth = $in_dbh->prepare(<<'EOF');
  SELECT u.username, p.slug, c.id, c.email, c.content, c.comment_date
    FROM comment c
    JOIN `user` u ON c.uid = u.id
    JOIN post p ON c.post_id = p.id
ORDER BY c.id
EOF
  $in_sth->execute();

  my $count  = 0;
  while ( my $comment = $in_sth->fetchrow_hashref ) {
    print '.' if $count++ % 100 == 0;
    $e->index(
      index   => 'comments',
      type    => 'published_comments',
      id      => $comment->{id},
      body    => {
          id        => $comment->{id},
          post_slug => $comment->{slug},
          username  => $comment->{username},
          email     => $comment->{email},
          content   => $comment->{content},
          date      => $comment->{comment_date},
          status    => $comment->{status}
      }
    );
  }
}

###############################################################################
#

print "fetching tags: ";
_get_tags;
print "\n";

print "indexing posts: ";
index_posts;
print "\n";

print "indexing comments: ";
index_comments;
print "\n";
